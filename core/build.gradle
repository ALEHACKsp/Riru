import org.apache.tools.ant.filters.FixCrLfFilter

import java.nio.file.Files
import java.security.MessageDigest

plugins {
    id 'com.android.application'
}

def apiVersion = rootProject.ext.riruApiVersion
def minApiVersion = rootProject.ext.riruMinApiVersion
def moduleProp = [
        id         : "riru-core",
        name       : "Riru",
        version    : "v22.0-alpha04",
        versionCode: "40",
        author     : "Rikka",
        description: "Inject into zygote process. Required by all \"Riru\" modules."
]

android {
    compileSdkVersion rootProject.ext.targetSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        externalNativeBuild {
            cmake {
                arguments "-DRIRU_VERSION_NAME:STRING=${moduleProp['version']}",
                        "-DRIRU_VERSION_CODE:STRING=${moduleProp['versionCode']}",
                        "-DRIRU_API_VERSION=$apiVersion",
                        "-DRIRU_MIN_API_VERSION=$minApiVersion"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
        }
    }
    buildFeatures {
        prefab true
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
}

repositories {
    maven { url 'https://dl.bintray.com/rikkaw/Libraries' }
}

dependencies {
    implementation project(':riru')
    implementation 'rikka.ndk.thirdparty:xhook:1.2.0'

    implementation 'androidx.annotation:annotation:1.1.0'
    compileOnly project(':stub')
}

def outDir = file("$rootDir/out")
def magiskDir = file("$outDir/magisk_module")
def zipName = "riru-${moduleProp['version']}.zip"

static def sha256sum(file) {
    def md = MessageDigest.getInstance("SHA-256")
    file.eachByte 4096, { bytes, size ->
        md.update(bytes, 0, size);
    }
    return md.digest().encodeHex()
}

static def renameOrFail(from, to) {
    if (!from.renameTo(to)) {
        throw new IOException("Unable reanme file $from to $to")
    }
}

android.applicationVariants.all { variant ->
    variant.outputs.all {
        def task = variant.assembleProvider.get()
        task.doLast {
            // clear
            delete { delete magiskDir }

            // copy from template
            copy {
                from "$rootDir/template/magisk_module"
                into magiskDir.path
                exclude 'customize.sh'
            }
            copy {
                from file("$rootDir/template/magisk_module/customize.sh")
                into magiskDir.path
                filter { line ->
                    line.replaceAll('%%%RIRU_API%%%', apiVersion.toString())
                            .replaceAll('%%%RIRU_VERSION_CODE%%%', moduleProp['versionCode'].toString())
                            .replaceAll('%%%RIRU_VERSION_NAME%%%', moduleProp['version'].toString())
                }
                filter(FixCrLfFilter.class,
                        eol: FixCrLfFilter.CrLf.newInstance("lf"))
            }

            // copy .git files manually since gradle exclude it by default
            Files.copy(file("$rootDir/template/magisk_module/.gitattributes").toPath(), file("${magiskDir.path}/.gitattributes").toPath())

            // generate module.prop
            def modulePropText = ""
            moduleProp.each { k, v -> modulePropText += "$k=$v\n" }
            modulePropText = modulePropText.trim()
            file("$magiskDir/module.prop").text = modulePropText

            // copy native files
            def nativeOutDir = file("build/intermediates/cmake/$variant.name/obj")

            // copy dex
            copy {
                from zipTree(file(outputFile)).matching { include 'classes.dex' }.singleFile
                into magiskDir.path
            }

            file("$magiskDir/system").mkdirs()
            file("$magiskDir/system_x86").mkdirs()
            renameOrFail(file("$nativeOutDir/arm64-v8a"), file("$magiskDir/system/lib64"))
            renameOrFail(file("$nativeOutDir/armeabi-v7a"), file("$magiskDir/system/lib"))
            renameOrFail(file("$nativeOutDir/x86_64"), file("$magiskDir/system_x86/lib64"))
            renameOrFail(file("$nativeOutDir/x86"), file("$magiskDir/system_x86/lib"))

            // generate sha1sum
            fileTree("$magiskDir").matching {
                exclude "README.md", "META-INF"
            }.visit { f ->
                if (f.directory) return
                file(f.file.path + ".sha256sum").text = sha256sum(f.file)
            }
        }
        task.finalizedBy zipMagiskMoudle
    }
}

task zipMagiskMoudle(type: Zip) {
    from magiskDir
    archiveName zipName
    destinationDir outDir
}